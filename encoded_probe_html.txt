<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Histogram Chart</title>
</head>
<style>
    .container {
            max-width: 1150px;
            height: 700px;
            margin: auto;
            border: 2px solid black;
            margin-top: 0px;
        }
        #heading{
            margin-top: 0px;
            color:white;
           background-color: blue;
            text-align: center;
           
        }
        #value_list {
    background-color: rgb(250, 181, 181);
    height: 500px;
    width: 450px;
    margin-left: 700px;
    margin-top: -500px;
    display: grid; /* Use grid layout */
    grid-template-columns: repeat(2, 1fr); /* Two equal columns */
    grid-template-rows: repeat(10, 1fr); /* Ten equal rows */
    
}

.item {
    display: flex; /* Center content */
    align-items: center; /* Vertically center */
    justify-content: center; /* Horizontally center */
    background-color: white; /* Change background for items */
    border: 1px solid #000; /* Optional border for better visibility */
    height: 100%; /* Use full height of the grid cell */
    margin-left: 5px;
    height: 40px;
    font-size: 12px;
    font-weight: bold;
}
#prevButton{
            width: 70px;
            height: 40px;
            background-color: red;
            color: white;
            font-weight: bold;
        }
        #mail_btn {
    width: 150px;
    height: 40px;
    margin-top: 55px;
    background-color: blue;
    color: white;
    font-weight: bold;
}

#pdf_btn {
margin-left: 600px;
    width: 150px;
    height: 40px;
    background-color: red;
    color: white;
    font-weight: bold;
}

        #popupMessage{
    display: none;
    position: fixed; 
    top: 20px;
    width: 300px;
    height: 70px;
    left: 40%;
    text-align: center;
    font-weight: bold;
    font-size: 20px;
    transform: translateX(-50%);
    background-color: yellow; 
    color: black; 
    border: 1px solid black ; 
    padding: 10px;
    z-index: 1000;
}       

</style>
<body>
    <div class="container">
        <div>
            <button id="prevButton" class="no-pdf">BACK</button>
            <h1 id="heading">Histogram of Readings</h1>
        </div>
       
        <!-- Add this in your consolidateSrNo.html -->
<div id="popupMessage" class="no-pdf">
</div>

<script>
  // Get the success message from the context if it exists
var successMessage = "{{ success_message|escapejs }}";  // Ensure safe rendering of message

if (successMessage) {
// If there is a success message, display the popup
var messageDiv = document.getElementById('popupMessage');
messageDiv.innerHTML = `<div>${successMessage}</div>`;  // Set the message content
messageDiv.style.display = 'block';  // Make the popup visible

// Optionally, hide the popup after 5 seconds
setTimeout(function() {
    messageDiv.style.display = 'none';  // Hide the popup after 5 seconds
}, 3000);  // Adjust the time duration as needed
}
   
</script>


    {% if no_results %}
    <p><h1 style="color: red;">No Data Found</h1></p>
    {% else %}
    <img src="data:image/png;base64,{{ histogram_chart }}" alt="Histogram Chart">

    <div id="value_list">
        {% for data in Histogram_Chart_values %}
        <div class="item">Part Model:{{ data.part_model }}</div>
        <div class="item">Current date:{{ data.current_date_time }}</div>
        <div class="item">Parameter Name:{{ data.parameter_name }}</div>
        <div class="item">Shift:{{ data.shift }}</div>
        <div class="item">Machine:{{ data.machine }}</div>
        <div class="item">Vendor Code:{{ data.vendor_code }}</div>
        <div class="item">Operator:{{ data.operator }}</div>
        <div class="item">From date:{{ data.formatted_from_date }}</div>
        <div class="item">To date:{{ data.formatted_to_date }}</div>
        {% endfor %}
        <div class="item">Sub Group:{{subgroups_length}} </div>
        <div class="item">UCLr:{{UCLr|floatformat:5}}</div>
        <div class="item">LCLr:{{LCLr|floatformat:5}}</div>
        <div class="item">UCLx:{{UCLx|floatformat:5}} </div>
        <div class="item">LCLx:{{LCLx|floatformat:5}}</div>
        <div class="item">XBAR: {{ x_bar|floatformat:5 }} </div>
        <div class="item">RBAR:{{ r_bar|floatformat:5 }}</div>
        <div class="item">Cp:{{ cp|floatformat:5 }}</div>
        <div class="item">Cpk:{{ cpk|floatformat:5 }}</div>
        <!-- <div class="item">Item 10</div> -->
    </div>
    {% endif %}

    <div class="dropdown-content" id="dropdownContent">
        <form id="exportForm" method="post" action="{% url 'histogram' %}">
            {% csrf_token %}
            <div class="button-container">
                <!-- Send Mail Button (Left Side) -->
                <button type="submit" class="no-pdf" onclick="hideDropdown()" name="export_type" value="send_mail" id="mail_btn">Send Mail</button>
                
                <!-- Email Selection Dropdown -->
                <label for="email" class="no-pdf"></label>
                <select name="recipient_email" class="no-pdf" id="recipientEmail" style="background-color: yellow; height: 40px;">
                    <option class="no-pdf" value="{{ email_1 }}">{{ email_1 }}</option>
                    <option class="no-pdf" value="{{ email_2 }}">{{ email_2 }}</option>
                </select>
            
                <!-- PDF Conversion Button (Right Side) -->
                <button type="submit" name="export_type" value="pdf" id="pdf_btn" class="no-pdf">PDF CONVERSION</button>
            </div>
        </form>
    </div>
    
       
    
</div>
<script>
    document.getElementById('prevButton').addEventListener('click', function() {
    // Redirect to the report page
    window.location.href = '/spc/'; // Replace 'report_page.html' with the actual URL of your report page
});



</script>
</body>
</html>
